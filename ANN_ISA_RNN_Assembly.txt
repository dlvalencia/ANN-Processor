addi $0 $a0 3 #a0 = max of 4 time steps (zero indexed)
add $0 $0 $a1 #a1 = time step counter
addi $0 $c0 1 #Set up a constant to increment variables
sfunc 2 #use ReLU
addi $0 $b0 10 #b0 = index of output neuron
addi $0 $b1 9 #b1 = loop limit for hidden layer
loopStart:
	source 0 #Data from input memory to LPUs
	add $0 $0 $b2 #hidden layer counter set to 0
HLWeightLoading:
	lw $b2 $b2 #Load weights.$b2 into LPUBank.$b2
	beq $b2 $b1 loadFromIMem
	add $c0 $b2 $b2 #Increment $b2
	jump HLWeightLoading
loadFromIMem:
	la $a1 #Load from InMem.$a1 to LPUBank
	add $0 $0 $b2 #hidden layer counter set to 0
	beq $a1 $0 writeOutputsHL
	source 1 #time step 2+, need previous HL output
loadFromANMem:
	la $b2 #Load ANMem.$b2 to LPUBank
	beq $b2 $b1 resetHLCounter
	add $c0 $b2 $b2 #Increment $b2
	jump loadFromANMem
resetHLCounter:
	add $0 $0 $b2 #hidden layer counter set to 0
writeOutputsHL:
	wm $b2 $b2 #ANMem.$b2 = LPUBank.$b2
	beq $b2 $b1 outputLayerCheck
	add $c0 $b2 $b2 #Increment $b2
	jump writeOutputsHL
outputLayerCheck:
	beq $a1 $a0 outputLayer
	add $c0 $a1 $a1 #Increment $a1
	jump loopStart
outputLayer:
	add $0 $0 $b2 #hidden layer counter set to 0
	lw $b0 $0 #Load WeightMem.$b0 -> LPUBank.0
outputLayerInputs:
	ls $b2 $0 #ANMem.$b2 -> LPUBank.0
	beq $b2 $b1 writeOL
	add $c0 $b2 $b2 #Increment $b2
	jump outputLayerInputs
writeOL:
	wm $0 $b0 #Write output neuron result